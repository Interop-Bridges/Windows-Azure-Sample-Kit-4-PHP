<?php/** *    Copyright 2011 Microsoft Corporation * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. *  * @category  Microsoft * @package   DealOfTheDay * @author    Ben Lobaugh <a-beloba@microsoft.com> * @copyright 2011 Copyright Microsoft Corporation. All Rights Reserved * @license   http://www.apache.org/licenses/LICENSE-2.0 **//* * This file sets up all the common functionality for * the website, EG: storage settings, table, blob, etc */require_once('config.php'); define('PROD_START_HOUR', 8);define('PROD_END_HOUR', 13);  if(!isset($_SERVER['RoleName'])) {     $_SERVER['RoleDeploymentID'] = 'local';     $_SERVER['RoleName'] = 'local';     $_SERVER['RoleInstanceID'] = 'local'; } /**  * @deprecated  */ define('ROLEID', $_SERVER['RoleDeploymentID'] . '/' . $_SERVER['RoleName'] . '/' . $_SERVER['RoleInstanceID']); // deprecated  define('MIN_WEBROLES', 5);  define('MAX_WEBROLES', 20);  // Create a unique ID for each time the website it his. Helps with logging and such define('RUNID', ROLEID . "_" . time() . "_" . rand(0, time()));   // worklist Queue constants define('WL_NEW_PROD', 'New Product'); define('WL_DEL_PROD', 'Delete Product'); define('WL_NEW_COMMENT', 'New Comment'); define('WL_DEL_COMMENT', 'Delete Comment'); define('WL_CODE_GIVEN', 'Code Given'); define('WL_CODE_VENDOR_REDEEMED', 'Code Vendor Redeemed');    // Performance metrics to automatically gather$perf_counters =  array(					'\Processor(*)\% Processor Time',					'\Memory\Available Mbytes',					'\TCPv4\Connections Established',					'\Network Interface(*)\Bytes Received/sec',					'\Network Interface(*)\Bytes Sent/sec'				); define('PERF_IN_SEC', 30); // How many seconds to check performance   require_once('Timer.class.php'); $timer = new Timer();  $timer->mark('including_objects'); /** Microsoft_WindowsAzure_Storage_Blob */require_once 'Microsoft/WindowsAzure/Storage/Blob.php'; /** Microsoft_WindowsAzure_Storage_Table */require_once 'Microsoft/WindowsAzure/Storage/Table.php';/** Microsoft_WindowsAzure_SessionHandler */require_once 'Microsoft/WindowsAzure/SessionHandler.php';// Windows Azure Queue Utility from the PHP SDKrequire_once 'Microsoft/WindowsAzure/Storage/Queue.php';require_once('Microsoft/WindowsAzure/Management/Client.php');require_once 'Microsoft/WindowsAzure/Diagnostics/Manager.php';// Bring in our entity classesrequire_once('Product.class.php');require_once('Data.class.php');require_once('Comment.class.php');require_once('Log.class.php');$timer->mark('done_including_objects');$timer->mark('create_storage_connections');$table = '';$blob = '';$queue = '';if(PRODUCTION_SITE) {	// this is a bad hack, but i am not sure how else to ensure these connections get made    // occasionally one of them will fail and that causes the whole system to blow up        do {        $again = false;	try {            $table = new Microsoft_WindowsAzure_Storage_Table(              'table.core.windows.net',              AZURE_SERVICE,              AZURE_STORAGE_KEY            );            $blob = new Microsoft_WindowsAzure_Storage_Blob(                    'blob.core.windows.net',                    AZURE_SERVICE,                    AZURE_STORAGE_KEY            );            $queue = new Microsoft_WindowsAzure_Storage_Queue(                    'queue.core.windows.net',                    AZURE_SERVICE,                    AZURE_STORAGE_KEY            );            $client = new Microsoft_WindowsAzure_Management_Client(                    SUB_ID,                     CERT,                     CERT_KEY            );            $manager = new Microsoft_WindowsAzure_Diagnostics_Manager($blob);                    } catch (Exception $e) { $again = true; }    } while ($again);        } else {	// Connect to local Storage Emulator	$table = new Microsoft_WindowsAzure_Storage_Table();	$blob = new Microsoft_WindowsAzure_Storage_Blob();	$queue = new Microsoft_WindowsAzure_Storage_Queue();        $manager = new Microsoft_WindowsAzure_Diagnostics_Manager($blob);}$timer->mark('done_creating_storage_connections');// Ensure everything required in the storage existsrequire_once('functions.php');require_once('Logger.class.php');require_once('WorkItem.class.php');// Starup the site logger$logger = new Logger();//$timer->mark('start_storage_integrity_check');//require_once('storage_integrity_check.php'); // separated because there was a lot of code//$timer->mark('stop_storage_integrity_check');$timer->mark('start_session_handler');// Setup and start the session$session_handler = new Microsoft_WindowsAzure_SessionHandler($table , 'Session');$session_handler->register();session_start();$timer->mark('stop_session_handler');$logger->Log('Startup', 'Site Initialization Successful', LOG_INFO);